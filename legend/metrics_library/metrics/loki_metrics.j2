component: loki
data_source_type: Loki
metrics_source: https://grafana.com/docs/loki/latest/logql/
reference: https://grafana.com/docs/loki/latest/
description: Prometheus, but for logs. Loki is an efficient log aggregator which indexes only the labels associated with the logs instead of indexing the entire logs.
panels:
    - title: All Logs
      type: Log
      sort_order: descending
      description: Logs with respect to the provided service key (default no such filter)
      targets:
        {% for dimension in data %}
          {% set filter_dict = {'filters': 'namespace=~"'+ dimension.get("labels").get("namespace")+ '"' } %}    #### after being filled up, it would look like, filter_dict = {"filters": "namespace=~xyz, label1=value1, label2=value2" }
          {% for label in dimension.get("labels").keys() %}
            {% if label!="namespace" and filter_dict.update({
                "filters": filter_dict.filters + ', ' + label.replace("/", "_").replace(".", "_").replace("-", "_") + "=~" + '"' + dimension.get("labels").get(label) + '"'
              }) %} 
              {% endif %}
          {% endfor %}
          {% set expression = filter_dict.get('filters') %}
          - expr: '{ {{ expression }} }'
            ref_no: 1
        {% endfor %}
    - title: Error Logs
      type: Log
      sort_order: descending
      description: All the logs associated with any error
      targets:
        {% for dimension in data %}
          {% set filter_dict = {'filters': 'namespace=~"'+ dimension.get("labels").get("namespace")+ '"' } %}    #### after being filled up, it would look like, filter_dict = {"filters": "namespace=~xyz, label1=value1, label2=value2" }
          {% for label in dimension.get("labels").keys() %}
            {% if label!="namespace" and filter_dict.update({
                "filters": filter_dict.filters + ', ' + label.replace("/", "_").replace(".", "_").replace("-", "_") + "=~" + '"' + dimension.get("labels").get(label) + '"'
              }) %} 
              {% endif %}
          {% endfor %}
          {% set expression = filter_dict.get('filters') %}
          - expr: '{ {{ expression }} } |~ "(?i)err"' ##  {namespace="nyala", customlabel1=value1, customlabel2=value2, ....} |~ "(?i)err"
            ref_no: 1
        {% endfor %}
    {% for dimension in data%}
      {% if "filters" in dimension.keys() %}
        {% set custom_labels_dict = {'custom_labels': 'namespace=~"'+ dimension.get("labels").get("namespace")+ '"' } %}  
        {% for label in dimension.get("labels").keys() %}
          {% if label!="namespace" and custom_labels_dict.update({
              "custom_labels": custom_labels_dict.custom_labels + ', ' + label.replace("/", "_").replace(".", "_").replace("-", "_") + "=~" + '"' + dimension.get("labels").get(label) + '"'
            }) %} 
            {% endif %}
        {% endfor %}
        {% set custom_filters_dict = {'custom_filters': '' } %}
        {% for filter in dimension.get("filters") %}
          {% if custom_filters_dict.update({
            "custom_filters": custom_filters_dict.custom_filters + ' |~ "' + filter + '"'
          }) %} 
          {% endif %}
        {% endfor %}
        {% set finalExpression = "{ " + custom_labels_dict.get('custom_labels') + " }" +  custom_filters_dict.get("custom_filters") %}
    - title: Custom Log Panel - {{ dimension.get("panel_name") }}
      type: Log
      sort_order: Descending
      description: Custom Log Panel for the query - {{ finalExpression }}
      targets:
      - expr: '{{ finalExpression }}'
        ref_no: 1
      alert_config: 
    {% endif %}
    {% endfor %}

